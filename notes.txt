
show for a better, more robust, more general graph case
referencing and dependency included as priority from the start

referencing trees has been very difficult to understand when the
tree itself is a dag graph - how do we track deltas in graph structure from
what the reference should be?

each tree node knows the structure of all its branches as a set of nodes, and
a set of edges connecting those nodes

also helps to solve the more general problem of referencing specific subgraphs

child nodes held as "refSubgraph" in ref node params?

ignore transforms for now - only direct referencing
graph.createReferenceNode(fromNode) - returns new node, not added to graph

graph runs on distinction between parametres and params, and easy conversion between them
if a node has a "params" input, it is a reference?
if a node has a "input" input, it is a transformer?

a node may only have a single "params" input, otherwise input order starts to matter

eventually abstract even the reference to the node class itself into param data -
each node params would hold a reference to the node class to use to operate on it



for ui, going with more signal-based approach lets us delegate even more functionality
to delegates, avoids needing to modify scene classes too much
